给定一个含有 n 个正整数的数组和一个正整数 target 。

找出该数组中满足其总和大于等于 target 的长度最小的 
子数组
 [numsl, numsl+1, ..., numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。

 

示例 1：

输入：target = 7, nums = [2,3,1,2,4,3]
输出：2
解释：子数组 [4,3] 是该条件下的长度最小的子数组。
示例 2：

输入：target = 4, nums = [1,4,4]
输出：1
示例 3：

输入：target = 11, nums = [1,1,1,1,1,1,1,1]
输出：0
 

提示：

1 <= target <= 109
1 <= nums.length <= 105
1 <= nums[i] <= 105
 

进阶：

如果你已经实现 O(n) 时间复杂度的解法, 请尝试设计一个 O(n log(n)) 时间复杂度的解法。

思路:最简单的暴力，双重循环遍历数组，时间复杂度为O（n^2）

  滑动窗口：定义一个left和right指针,sum求窗口内元素的和，如果sum<target,则right++，否则left++。可以理解为：当sum小，需要扩大窗口，让sum变大，满足最基本的条件sum>=target，当sum已经满足基本条件时,尝试缩小窗口的范围，得到一个稍小长度的窗口，直到ri
  
  class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        int left=0;
        int right=0;
        int len=nums.size();
        
        int cnt=len;
        int sum=nums[left];

        while(right<len-1){
            while(sum<target&&right<=len-2){
                right++;
                sum += nums[right];
            }
            while(sum>=target){
                cnt = min(right-left+1,cnt);
                left++;
                sum = sum-nums[left-1];
            }
        }
        
        if(left==0&&sum<target){
            return 0;
        }
        
        return cnt;
    }
};
