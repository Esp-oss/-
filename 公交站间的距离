环形公交路线上有 n 个站，按次序从 0 到 n - 1 进行编号。我们已知每一对相邻公交站之间的距离，distance[i] 表示编号为 i 的车站和编号为 (i + 1) % n 的车站之间的距离。

环线上的公交车都可以按顺时针和逆时针的方向行驶。

返回乘客从出发点 start 到目的地 destination 之间的最短距离。

 

示例 1：



输入：distance = [1,2,3,4], start = 0, destination = 1
输出：1
解释：公交站 0 和 1 之间的距离是 1 或 9，最小值是 1。
 

示例 2：



输入：distance = [1,2,3,4], start = 0, destination = 2
输出：3
解释：公交站 0 和 2 之间的距离是 3 或 7，最小值是 3。
 

示例 3：



输入：distance = [1,2,3,4], start = 0, destination = 3
输出：4
解释：公交站 0 和 3 之间的距离是 6 或 4，最小值是 4。
 

提示：

1 <= n <= 10^4
distance.length == n
0 <= start, destination < n
0 <= distance[i] <= 10^4

思路：定义两个变量一个变量记录start到destination直接的距离，另一个记录剩下的部分，剩下的部分=全部-start到destination直接的距离。另外如果destina<start的话两者可以交换，因为起始位置和重点位置交换不影响距离。如果顺序遍历的情况下start到destination的距离
等于全部距离的和，那则比较最后一段距离和剩下的距离和。

class Solution {
public:
    int distanceBetweenBusStops(vector<int>& distance, int start, int destination) {
        int sum1=0;
        int sum2=0;
        int len=distance.size();
        int t=0;
        if(start>destination){
           t=destination;
           destination=start;
           start=t;
        }
        for(int i=0;i<=len-1;i++){
            if(i>=start&&i<destination){
                sum2 = sum2 + distance[i];
            }
            sum1=sum1+distance[i];
        }
        if(sum1==sum2){
            return min(distance[len-1],sum1-distance[len-1]);
        }
        return min(sum1-sum2,sum2);
    }
};
